// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class EndorseERC721ProxyCreated extends ethereum.Event {
  get params(): EndorseERC721ProxyCreated__Params {
    return new EndorseERC721ProxyCreated__Params(this);
  }
}

export class EndorseERC721ProxyCreated__Params {
  _event: EndorseERC721ProxyCreated;

  constructor(event: EndorseERC721ProxyCreated) {
    this._event = event;
  }

  get _sproxy(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _creator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _name(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get _symbol(): string {
    return this._event.parameters[3].value.toString();
  }
}

export class LikeERC721ProxyCreated extends ethereum.Event {
  get params(): LikeERC721ProxyCreated__Params {
    return new LikeERC721ProxyCreated__Params(this);
  }
}

export class LikeERC721ProxyCreated__Params {
  _event: LikeERC721ProxyCreated;

  constructor(event: LikeERC721ProxyCreated) {
    this._event = event;
  }

  get _sproxy(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _creator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _name(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get _symbol(): string {
    return this._event.parameters[3].value.toString();
  }
}

export class ShareableERC721ProxyCreated extends ethereum.Event {
  get params(): ShareableERC721ProxyCreated__Params {
    return new ShareableERC721ProxyCreated__Params(this);
  }
}

export class ShareableERC721ProxyCreated__Params {
  _event: ShareableERC721ProxyCreated;

  constructor(event: ShareableERC721ProxyCreated) {
    this._event = event;
  }

  get _sproxy(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _creator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _name(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get _symbol(): string {
    return this._event.parameters[3].value.toString();
  }
}

export class TalkoFactory extends ethereum.SmartContract {
  static bind(address: Address): TalkoFactory {
    return new TalkoFactory("TalkoFactory", address);
  }

  EndorseERC721BeaconAddress(): Address {
    let result = super.call(
      "EndorseERC721BeaconAddress",
      "EndorseERC721BeaconAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_EndorseERC721BeaconAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "EndorseERC721BeaconAddress",
      "EndorseERC721BeaconAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  LikeERC721BeaconAddress(): Address {
    let result = super.call(
      "LikeERC721BeaconAddress",
      "LikeERC721BeaconAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_LikeERC721BeaconAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "LikeERC721BeaconAddress",
      "LikeERC721BeaconAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ShareableERC721BeaconAddress(): Address {
    let result = super.call(
      "ShareableERC721BeaconAddress",
      "ShareableERC721BeaconAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_ShareableERC721BeaconAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "ShareableERC721BeaconAddress",
      "ShareableERC721BeaconAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  createEProxy(
    _name: string,
    _symbol: string,
    _index: BigInt,
    _owner: Address
  ): Address {
    let result = super.call(
      "createEProxy",
      "createEProxy(string,string,uint256,address):(address)",
      [
        ethereum.Value.fromString(_name),
        ethereum.Value.fromString(_symbol),
        ethereum.Value.fromUnsignedBigInt(_index),
        ethereum.Value.fromAddress(_owner)
      ]
    );

    return result[0].toAddress();
  }

  try_createEProxy(
    _name: string,
    _symbol: string,
    _index: BigInt,
    _owner: Address
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createEProxy",
      "createEProxy(string,string,uint256,address):(address)",
      [
        ethereum.Value.fromString(_name),
        ethereum.Value.fromString(_symbol),
        ethereum.Value.fromUnsignedBigInt(_index),
        ethereum.Value.fromAddress(_owner)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  createLProxy(
    _name: string,
    _symbol: string,
    _index: BigInt,
    _owner: Address
  ): Address {
    let result = super.call(
      "createLProxy",
      "createLProxy(string,string,uint256,address):(address)",
      [
        ethereum.Value.fromString(_name),
        ethereum.Value.fromString(_symbol),
        ethereum.Value.fromUnsignedBigInt(_index),
        ethereum.Value.fromAddress(_owner)
      ]
    );

    return result[0].toAddress();
  }

  try_createLProxy(
    _name: string,
    _symbol: string,
    _index: BigInt,
    _owner: Address
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createLProxy",
      "createLProxy(string,string,uint256,address):(address)",
      [
        ethereum.Value.fromString(_name),
        ethereum.Value.fromString(_symbol),
        ethereum.Value.fromUnsignedBigInt(_index),
        ethereum.Value.fromAddress(_owner)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  createSProxy(
    _name: string,
    _symbol: string,
    _index: BigInt,
    _owner: Address
  ): Address {
    let result = super.call(
      "createSProxy",
      "createSProxy(string,string,uint256,address):(address)",
      [
        ethereum.Value.fromString(_name),
        ethereum.Value.fromString(_symbol),
        ethereum.Value.fromUnsignedBigInt(_index),
        ethereum.Value.fromAddress(_owner)
      ]
    );

    return result[0].toAddress();
  }

  try_createSProxy(
    _name: string,
    _symbol: string,
    _index: BigInt,
    _owner: Address
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createSProxy",
      "createSProxy(string,string,uint256,address):(address)",
      [
        ethereum.Value.fromString(_name),
        ethereum.Value.fromString(_symbol),
        ethereum.Value.fromUnsignedBigInt(_index),
        ethereum.Value.fromAddress(_owner)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  endorsableProxyNameAndSymbolExists(_name: string, _symbol: string): boolean {
    let result = super.call(
      "endorsableProxyNameAndSymbolExists",
      "endorsableProxyNameAndSymbolExists(string,string):(bool)",
      [ethereum.Value.fromString(_name), ethereum.Value.fromString(_symbol)]
    );

    return result[0].toBoolean();
  }

  try_endorsableProxyNameAndSymbolExists(
    _name: string,
    _symbol: string
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "endorsableProxyNameAndSymbolExists",
      "endorsableProxyNameAndSymbolExists(string,string):(bool)",
      [ethereum.Value.fromString(_name), ethereum.Value.fromString(_symbol)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  likeableProxyNameAndSymbolExists(_name: string, _symbol: string): boolean {
    let result = super.call(
      "likeableProxyNameAndSymbolExists",
      "likeableProxyNameAndSymbolExists(string,string):(bool)",
      [ethereum.Value.fromString(_name), ethereum.Value.fromString(_symbol)]
    );

    return result[0].toBoolean();
  }

  try_likeableProxyNameAndSymbolExists(
    _name: string,
    _symbol: string
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "likeableProxyNameAndSymbolExists",
      "likeableProxyNameAndSymbolExists(string,string):(bool)",
      [ethereum.Value.fromString(_name), ethereum.Value.fromString(_symbol)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  shareableProxyNameAndSymbolExists(_name: string, _symbol: string): boolean {
    let result = super.call(
      "shareableProxyNameAndSymbolExists",
      "shareableProxyNameAndSymbolExists(string,string):(bool)",
      [ethereum.Value.fromString(_name), ethereum.Value.fromString(_symbol)]
    );

    return result[0].toBoolean();
  }

  try_shareableProxyNameAndSymbolExists(
    _name: string,
    _symbol: string
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "shareableProxyNameAndSymbolExists",
      "shareableProxyNameAndSymbolExists(string,string):(bool)",
      [ethereum.Value.fromString(_name), ethereum.Value.fromString(_symbol)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _shareableTokenBeacon_vLogic(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _likeTokenBeacon_vLogic(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _endorseTokenBeacon_vLogic(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateEProxyCall extends ethereum.Call {
  get inputs(): CreateEProxyCall__Inputs {
    return new CreateEProxyCall__Inputs(this);
  }

  get outputs(): CreateEProxyCall__Outputs {
    return new CreateEProxyCall__Outputs(this);
  }
}

export class CreateEProxyCall__Inputs {
  _call: CreateEProxyCall;

  constructor(call: CreateEProxyCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _index(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _owner(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class CreateEProxyCall__Outputs {
  _call: CreateEProxyCall;

  constructor(call: CreateEProxyCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class CreateLProxyCall extends ethereum.Call {
  get inputs(): CreateLProxyCall__Inputs {
    return new CreateLProxyCall__Inputs(this);
  }

  get outputs(): CreateLProxyCall__Outputs {
    return new CreateLProxyCall__Outputs(this);
  }
}

export class CreateLProxyCall__Inputs {
  _call: CreateLProxyCall;

  constructor(call: CreateLProxyCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _index(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _owner(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class CreateLProxyCall__Outputs {
  _call: CreateLProxyCall;

  constructor(call: CreateLProxyCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class CreateSProxyCall extends ethereum.Call {
  get inputs(): CreateSProxyCall__Inputs {
    return new CreateSProxyCall__Inputs(this);
  }

  get outputs(): CreateSProxyCall__Outputs {
    return new CreateSProxyCall__Outputs(this);
  }
}

export class CreateSProxyCall__Inputs {
  _call: CreateSProxyCall;

  constructor(call: CreateSProxyCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _index(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _owner(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class CreateSProxyCall__Outputs {
  _call: CreateSProxyCall;

  constructor(call: CreateSProxyCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}
